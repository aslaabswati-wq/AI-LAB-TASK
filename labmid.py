# -*- coding: utf-8 -*-
"""Labmid.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/108pTmh6dDnyANIN2IT2YgP_EUQzm3NVh
"""

from collections import deque
import heapq

# Print puzzle in 3x3 form
def show(state):
    for i in range(0, 9, 3):
        print(state[i:i+3])
    print()

# Generate all possible next states
def moves(state):
    i = state.index(0)
    x, y = i // 3, i % 3
    dirs = [(-1,0),(1,0),(0,-1),(0,1)]
    result = []
    for dx, dy in dirs:
        nx, ny = x+dx, y+dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            ni = nx*3+ny
            new = state[:]
            new[i], new[ni] = new[ni], new[i]
            result.append(new)
    return result

# BFS (shortest path)
def bfs(start, goal):
    q = deque([(start, [start])])
    seen = set()
    while q:
        s, path = q.popleft()
        if tuple(s) in seen: continue
        seen.add(tuple(s))
        if s == goal: return path
        for nxt in moves(s):
            q.append((nxt, path+[nxt]))

# DFS
def dfs(start, goal):
    st = [(start, [start])]
    seen = set()
    while st:
        s, path = st.pop()
        if tuple(s) in seen: continue
        seen.add(tuple(s))
        if s == goal: return path
        for nxt in moves(s):
            st.append((nxt, path+[nxt]))

# Manhattan distance for A*
def h(state, goal):
    d = 0
    for i in range(9):
        if state[i]!=0:
            x1,y1=i//3,i%3
            j=goal.index(state[i])
            x2,y2=j//3,j%3
            d+=abs(x1-x2)+abs(y1-y2)
    return d

# A* algorithm
def astar(start, goal):
    pq=[]
    heapq.heappush(pq, (h(start,goal), start, [start]))
    seen=set()
    while pq:
        _, s, path = heapq.heappop(pq)
        if tuple(s) in seen: continue
        seen.add(tuple(s))
        if s==goal: return path
        for nxt in moves(s):
            heapq.heappush(pq, (len(path)+h(nxt,goal), nxt, path+[nxt]))

# Main
start=[1,2,3,4,0,5,6,7,8]
goal=[1,2,3,4,5,6,7,8,0]

print("BFS Solution:")
for step in bfs(start, goal): show(step)

print("DFS Solution:")
for step in dfs(start, goal): show(step)

print("A* Solution:")
for step in astar(start, goal): show(step)