# -*- coding: utf-8 -*-
"""A*Algo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11n_iaRXwRtwpTnh5LYZ6Efs_vRWV6Pyn
"""

graph = {
    "Lahore": {"Faisalabad": 270, "Islamabad": 190},
    "Islamabad": {"Faisalabad": 270, "Peshawar": 190},
    "Faisalabad": {"Lahore": 180, "Multan": 220},
    "Multan": {"Faisalabad": 220, "Karachi": 880},
    "Peshawar": {"Islamabad": 190},
    "Karachi": {"Multan": 880}
}

heuristic = {
    "Lahore": 1210,
    "Islamabad": 1100,
    "Faisalabad": 1050,
    "Multan": 880,
    "Peshawar": 1250,
    "Karachi": 0
}

import heapq

def a_star(graph, start, goal, heuristic):
    """A* search returning (path, cost)."""
    open_list = []
    heapq.heappush(open_list, (heuristic[start], 0, [start]))  # (f=g+h, g, path)
    visited = set()

    while open_list:
        f, g, path = heapq.heappop(open_list)
        node = path[-1]

        if node == goal:
            return path, g  # found the path

        if node in visited:
            continue
        visited.add(node)

        for neighbor, cost in graph.get(node, {}).items():
            if neighbor not in visited:
                g_new = g + cost
                f_new = g_new + heuristic[neighbor]
                heapq.heappush(open_list, (f_new, g_new, path + [neighbor]))